pyvjoy is a set of Python bindings for vJoy (vjoystick.sourceforge.net)

With this library you can easily set Axis and Button values on any vJoy device.  
Low-level bindings are provided in pyvjoy._sdk as well as a (hopefully) slightly more 'Pythonic' API in the pyvjoy.VJoyDevice() object.

Currently vJoyInterface.dll is looked for inside the pyvjoy directory only so place the desired version of that file there to use.

"Pointy's Joystick Test App" is very useful when testing vJoy and this library: http://www.planetpointy.co.uk/joystick-test-application/

USAGE
-----

import pyvjoy

#Pythonic API, item-at-a-time

j = pyvjoy.VJoyDevice(1)

#turn button number 15 on
j.set_button(15,1)

#Notice the args are (buttonID,state) whereas vJoy's native API is the other way around.


#turn button 15 off again
j.set_button(15,0)

#Set X axis to fully left
j.set_axis(pyvjoy.HID_USAGE_X, 0x1)

#Set X axis to fully right
j.set_axis(pyvjoy.HID_USAGE_X, 0x8000)

#Also implemented:

j.reset()
j.reset_buttons()
j.reset_povs()


#The 'efficient' method as described in vJoy's docs - set multiple values at once

```
j.Data
>> <pyvjoy.data.Data at 0x...>

j.Data.labels
>> ['bDevice','wThrottle','wRudder', ..., 'wAxisX', ..., 'lButtons', ...]

# modify values before update
j.Data.modify_value('wAxisX', 0x4000) # axis values range from 0x1 to 0x8000
j.Data.modify_value('lButtons', 0x0801) # set button 1 (0x1) and button 12 (0x0800) ON

# update values synchronously based on j.Data
j.update()

#Lower-level API just wraps the functions in the DLL as thinly as possible, with some attempt to raise exceptions instead of return codes.
```


